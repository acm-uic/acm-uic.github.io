name: ci

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

jobs:
  check_build_and_deploy_job:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: Build PR and Deploy üöÄ
    needs: terraform_plan
    
    steps:
      - name: Checkout repo üõéÔ∏è
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Use Node 18.x üîß
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Install Dependencies üì¶
        run: |
          yarn install

      - name: Build ‚öôÔ∏è
        env:
          TYPESENSE_HOST: ${{ needs.terraform_plan.outputs.typesense_host }}
          TYPESENSE_SEARCH_ONLY_API_KEY: ${{ needs.terraform_plan.outputs.typesense_search_only_api_key }}
        run: |
          yarn build

      - name: Deploy Staging Environment üöÄ
        uses: Azure/static-web-apps-deploy@latest
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/build"
          skip_app_build: true
          skip_deploy_on_missing_secrets: true

      - name: Run linters and formatter checks üíÑ
        run: |
          yarn typecheck
          yarn lint:ci
          yarn prettier:ci

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Cleanup Staging Environment üßπ
    steps:
      - name: Cleanup Staging Environment üßπ
        uses: Azure/static-web-apps-deploy@latest
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
          skip_deploy_on_missing_secrets: true

  build_release_gh_pages:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Build and Push GitHub Pages Site üöÄ
    needs: terraform_apply
    concurrency:
      group: build_release_gh_pages
      cancel-in-progress: true
    steps:
      - name: Checkout repo üõéÔ∏è
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Use Node 18.x üîß
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Setup Pages üìÉ
        id: pages
        uses: actions/configure-pages@v3

      - name: Install Dependencies üì¶
        run: |
          yarn install

      - name: Run linter and formatter checks üö®
        run: |
          yarn typecheck
          yarn lint:ci
          yarn prettier:ci

      - name: Build ‚öôÔ∏è
        env:
          TYPESENSE_HOST: ${{ needs.terraform_apply.outputs.typesense_host }}
          TYPESENSE_SEARCH_ONLY_API_KEY: ${{ needs.terraform_apply.outputs.typesense_search_only_api_key }}
        run: |
          yarn build

      - name: Upload artifact ‚¨ÜÔ∏è
        uses: actions/upload-pages-artifact@v1
        with:
          path: build/

      - name: Deploy to GitHub Pages üöÄ
        id: deployment
        uses: actions/deploy-pages@v2

  update_search_db:
    runs-on: ubuntu-latest
    name: Update search DB üîç
    needs: terraform_apply
    steps:
      - name: Checkout repo üõéÔ∏è
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run DocSearch Scraper üîç
        run: |
          docker run \
            -env TYPESENSE_API_KEY=${{ secrets.TYPESENSE_API_KEY }} \
            -env TYPESENSE_HOST=${{ needs.terraform_apply.outputs.typesense_host }} \
            -env TYPESENSE_PORT=443 \
            -env TYPESENSE_PROTOCOL=https \
            --env "CONFIG=$(cat ./.github/workflows/typesense-scraper-config.json | jq -r tostring)" \
            typesense/docsearch-scraper:0.4.0

  terraform_plan:
    runs-on: ubuntu-latest
    name: Terraform Plan ü§ñüìñ
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    outputs:
      typesense_search_only_api_key: ${{ steps.tf-outputs.outputs.typesense_search_only_api_key }}
      typesense_host: ${{ steps.tf-outputs.outputs.typesense_host }}
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ARM_USE_OIDC: true
      TF_WORKSPACE: prod
      TF_IN_AUTOMATION: true
      TF_INPUT: 0

    steps:
      - name: Checkout repo üõéÔ∏è
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Terraform Format üíÑ
        id: fmt
        uses: dflook/terraform-fmt-check@v1
        with:
          path: tf
          workspace: ${{ env.TF_WORKSPACE }}

      - name: Terraform Validate üëÄ
        id: validate
        uses: dflook/terraform-validate@v1
        with:
          path: tf
          workspace: ${{ env.TF_WORKSPACE }}

      - name: Get Typesense collection name ‚öôÔ∏è
        id: get_typesense_collection_name
        run: |
          typesense_collection_name=$(jq -r '.index_name' .github/workflows/typesense-scraper-config.json)
          echo "typesense_collection_name=$typesense_collection_name" >> "$GITHUB_OUTPUT"

      - name: Terraform Plan üìñ
        id: plan
        uses: dflook/terraform-plan@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: tf
          workspace: ${{ env.TF_WORKSPACE }}
          variables: |
            typesense_api_key="${{ secrets.TYPESENSE_API_KEY }}"
            typesense_rg="${{ secrets.TYPESENSE_RESOURCE_GROUP_NAME }}"
            typesense_collection_name="${{ steps.get_typesense_collection_name.outputs.typesense_collection_name }}"

      - name: Get outputs ‚öôÔ∏è
        uses: dflook/terraform-output@v1
        id: tf-outputs
        with:
          path: tf
          workspace: ${{ env.TF_WORKSPACE }}

  terraform_apply:
    runs-on: ubuntu-latest
    name: Terraform Apply ü§ñüöÄ
    environment: azure-container-app
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_USE_OIDC: true
      TF_WORKSPACE: prod
      TF_IN_AUTOMATION: true
      TF_INPUT: 0
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      typesense_search_only_api_key: ${{ steps.tf-outputs.outputs.typesense_search_only_api_key }}
      typesense_host: ${{ steps.tf-outputs.outputs.typesense_host }}

    steps:
      - name: Checkout repo üõéÔ∏è
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Terraform Format üíÑ
        id: fmt
        uses: dflook/terraform-fmt-check@v1
        with:
          path: tf
          workspace: ${{ env.TF_WORKSPACE }}

      - name: Terraform Validate üëÄ
        id: validate
        uses: dflook/terraform-validate@v1
        with:
          path: tf
          workspace: ${{ env.TF_WORKSPACE }}

      - name: Get Typesense collection name ‚öôÔ∏è
        id: get_typesense_collection_name
        run: |
          typesense_collection_name=$(jq -r '.index_name' .github/workflows/typesense-scraper-config.json)
          echo "typesense_collection_name=$typesense_collection_name" >> "$GITHUB_OUTPUT"

      - name: Terraform Apply üöÄ
        id: apply
        uses: dflook/terraform-apply@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: tf
          workspace: ${{ env.TF_WORKSPACE }}
          variables: |
            typesense_api_key="${{ secrets.TYPESENSE_API_KEY }}"
            typesense_rg="${{ secrets.TYPESENSE_RESOURCE_GROUP_NAME }}"
            typesense_collection_name="${{ steps.get_typesense_collection_name.outputs.typesense_collection_name }}"

      - name: Get outputs ‚öôÔ∏è
        uses: dflook/terraform-output@v1
        id: tf-outputs
        with:
          path: tf
          workspace: ${{ env.TF_WORKSPACE }}
