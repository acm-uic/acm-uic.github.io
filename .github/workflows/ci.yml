name: ci

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

jobs:
  check_build_and_deploy_job:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    name: Build PR and Deploy 🚀
    steps:
      - name: Checkout repo 🛎️
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Use Node 18.x 🔧
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Install Dependencies 📦
        run: |
          yarn install

      - name: Test Build 🚧
        env:
          TYPESENSE_HOST: ${{ secrets.TYPESENSE_HOST }}
          TYPESENSE_SEARCH_ONLY_API_KEY: ${{ secrets.TYPESENSE_SEARCH_ONLY_API_KEY }}
        run: yarn build

      - name: Deploy Staging Environment 🚀
        uses: Azure/static-web-apps-deploy@latest
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/build"
          skip_app_build: true
          skip_deploy_on_missing_secrets: true

      - name: Run linters and formatter checks 💄
        run: |
          yarn typecheck
          yarn lint:ci
          yarn prettier:ci

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Cleanup Staging Environment 🧹
    steps:
      - name: Cleanup Staging Environment 🧹
        uses: Azure/static-web-apps-deploy@latest
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
          skip_deploy_on_missing_secrets: true

  build_release_gh_pages:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Build and Push GitHub Pages Site 🚀
    needs: terraform_apply
    concurrency:
      group: build_release_gh_pages
      cancel-in-progress: true
    steps:
      - name: Checkout repo 🛎️
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Use Node 18.x 🔧
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Setup Pages 📃
        id: pages
        uses: actions/configure-pages@v3

      - name: Install Dependencies 📦
        run: |
          yarn install

      - name: Run linter and formatter checks 🚨
        run: |
          yarn typecheck
          yarn lint:ci
          yarn prettier:ci

      - name: Build ⚙️
        env:
          TYPESENSE_HOST: ${{ secrets.TYPESENSE_HOST }}
          TYPESENSE_SEARCH_ONLY_API_KEY: ${{ secrets.TYPESENSE_SEARCH_ONLY_API_KEY }}
        run: |
          yarn build

      - name: Upload artifact ⬆️
        uses: actions/upload-pages-artifact@v1
        with:
          path: build/

      - name: Deploy to GitHub Pages 🚀
        id: deployment
        uses: actions/deploy-pages@v2

  call_typesense_scraper:
    name: Call Typesense Scraper 🔍
    uses: ./.github/workflows/typesense-scraper.yml
    needs: terraform_apply
    secrets:
      TYPESENSE_API_KEY: ${{ secrets.TYPESENSE_API_KEY }}

  terraform_plan:
    runs-on: ubuntu-latest
    name: Terraform Plan 🤖📖
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_USE_OIDC: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Checkout repo 🛎️
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Terraform 🔧
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format 💄
        id: fmt
        run: terraform -chdir=tf fmt -check
        continue-on-error: true

      - name: Terraform Init ⚙️
        id: init
        run: terraform -chdir=tf init

      - name: Terraform Validate 👀
        id: validate
        run: terraform -chdir=tf validate -no-color
        continue-on-error: true

      - name: Terraform Plan 📖
        id: plan
        run: |
          terraform -chdir=tf plan -no-color -input=false -out tfplan \
            -var "github_token=${{ secrets.GITHUB_TOKEN }}" \
            -var "typesense_api_key=${{ secrets.TYPESENSE_API_KEY }}" \
            -var "typesense_rg=${{ secrets.TYPESENSE_RESOURCE_GROUP_NAME }}" \
            -var "typesense_collection_name=$(jq -r '.index_name' ./.github/workflows/typesense-scraper-config.json)"
        continue-on-error: true

      - name: Update Pull Request 💬
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `Terraform Format and Style 💄\`${{ steps.fmt.outcome }}\`
            Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            Terraform Validation 👀\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Status ✅
        if: steps.plan.outcome == 'failure' || steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure'
        run: exit 1
      
      - name: Encrypt Terraform Plan 🔒
        working-directory: tf
        run: |
          gpg --batch --output tfplan.gpg --passphrase ${{ secrets.TFPLAN_GPG_PASSPHRASE }} --symmetric tfplan
          rm tfplan

      - name: Publish Terraform Plan 💾
        uses: actions/upload-artifact@v3
        with:
          name: tfplan.gpg
          path: tf/tfplan.gpg

  terraform_apply:
    runs-on: ubuntu-latest
    name: Terraform Apply 🤖🚀
    environment: azure-container-app
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_USE_OIDC: true
    needs: terraform_plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.terraform_plan.outputs.tfplanExitCode == 2
    steps:
      - name: Setup Terraform 🔧
        uses: hashicorp/setup-terraform@v2

      - name: Download Terraform Plan 💾
        uses: actions/download-artifact@v3
        with:
          name: tfplan.gpg

      - name: Decrypt Terraform Plan 🔓
        run: |
          gpg --batch --output tfplan --passphrase ${{ secrets.TFPLAN_GPG_PASSPHRASE }} --decrypt tfplan.gpg
          rm tfplan.gpg

      - name: Terraform Init ⚙️
        id: init
        run: terraform -chdir=tf init

      - name: Terraform Apply 🚀
        run: terraform -chdir=tf apply -auto-approve tfplan
